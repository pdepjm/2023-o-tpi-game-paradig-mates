import wollok.game.*
import Configuracion.*
import Entorno.*
import Informacion.*
import Piezas.*
import Tablero.*

//////////////////////////////////////////////////////////
// ENTORNO.
//////////////////////////////////////////////////////////
describe "Menu" {
	test "Es posbible mostrarlo" {
		menu.cargar()
		assert.that(menu.estaActivo())
	}
	
	test "Es posible eliminarlo" {
		menu.cargar()
		menu.ocultar()
		assert.notThat(menu.estaActivo())
	}
}

describe "Hub" {
	test "Es posible mostrar su informacion" {
		hub.cargar()
		assert.that(game.hasVisual(hub.puntajeAcumulado()))
		assert.that(game.hasVisual(hub.filasCompletadas()))
	}
	
	test "Es posible resetear su informacion" {
		hub.puntajeAcumulado().incrementar(10)
		hub.filasCompletadas().incrementar(10)
		hub.resetear()
		assert.equals("0", hub.puntajeAcumulado().text())
		assert.equals("0", hub.filasCompletadas().text())
	}
	
	test "Si se completa 1 fila, se obtiene 100 puntos" {
		assert.equals(100, hub.puntosGanados([1]))
	}
	
	test "Si se completa 2 fila, se obtiene 200 puntos" {
		assert.equals(200, hub.puntosGanados([1, 2]))
	}
	
	test "Si se completa 3 fila, se obtiene 400 puntos" {
		assert.equals(400, hub.puntosGanados([1, 2, 3]))
	}
	
	test "Si se completa 4 fila, se obtiene 800 puntos" {
		assert.equals(800, hub.puntosGanados([1, 2, 3, 4]))
	}
	
	test "Es posible modificar los contadores del juego" {
		hub.modificarContadores([1, 2, 3])
		assert.equals("400", hub.puntajeAcumulado().text())
		assert.equals("3", hub.filasCompletadas().text())
	}
}

//////////////////////////////////////////////////////////
// INFORMACION.
//////////////////////////////////////////////////////////
describe "Puntaje obtenido" {
	test "Es posible aumentarlo dado un valor" {
		hub.puntajeAcumulado().incrementar(100)
		hub.puntajeAcumulado().incrementar(200)
		assert.equals("300", hub.puntajeAcumulado().text())
	}
	
	test "Es posible resetearlo a 0" {
		hub.puntajeAcumulado().incrementar(100)
		hub.puntajeAcumulado().resetear()
		assert.equals("0", hub.puntajeAcumulado().text())
	}
}

describe "Filas completadas" {
	test "Es posible aumentarlo en 1" {
		hub.filasCompletadas().incrementar(1)
		assert.equals("1", hub.filasCompletadas().text())
	}
	
	test "Es posible aumentarlo en 2" {
		hub.filasCompletadas().incrementar(2)
		assert.equals("2", hub.filasCompletadas().text())
	}
	
	test "Es posible aumentarlo en 3" {
		hub.filasCompletadas().incrementar(3)
		assert.equals("3", hub.filasCompletadas().text())
	}
	
	test "Es posible aumentarlo en 4" {
		hub.filasCompletadas().incrementar(4)
		assert.equals("4", hub.filasCompletadas().text())
	}
	
	test "Es posible resetearlo a 0" {
		hub.filasCompletadas().incrementar(2)
		hub.filasCompletadas().resetear()
		assert.equals("0", hub.filasCompletadas().text())
	}
}

describe "Proxima pieza" {
	const unaPieza = new Pieza_Z()
	
	test "Es posible cargarlo" {
		hub.proximaPieza().image(unaPieza.display())
		hub.proximaPieza().cargar()
		assert.that(hub.proximaPieza().estaActiva())
	}
	
	test "Es posible ocultarlo" {
		hub.proximaPieza().image(unaPieza.display())
		hub.proximaPieza().cargar()
		hub.proximaPieza().ocultar()
		assert.notThat(hub.proximaPieza().estaActiva())
	}
}

describe "Mensaje" {
	const mensaje = new Mensaje(image = "Creaciones/Continuar.png", position = game.at(0,0))
	
	test "Es posible mostrar el mensaje" {
		mensaje.cargar()
		assert.that(mensaje.estaActivo())
	}
	
	test "Es posible ocultar el mensaje" {
		mensaje.cargar()
		mensaje.ocultar()
		assert.notThat(mensaje.estaActivo())
	}
}

//////////////////////////////////////////////////////////
// PIEZAS.
//////////////////////////////////////////////////////////
describe "Piezas" {
	const unaPieza = new Pieza_Z()
	
	test "Es posible mostrarlo en el tablero" {
		unaPieza.generar()
		assert.that(unaPieza.estaActiva())
	}
	
	test "Es posible eliminarlo del tablero" {
		unaPieza.generar()
		unaPieza.eliminar()
		assert.notThat(unaPieza.estaActiva())
	}
	
	test "Es posible moverlo hacia abajo" {
		unaPieza.moverAbajo()
		assert.equals(config.centroGeneracion().down(1), unaPieza.centro().position())
	}
	
	test "Es posible moverlo hacia la derecha" {
		unaPieza.moverDerecha()
		assert.equals(config.centroGeneracion().right(1), unaPieza.centro().position())
	}
	
	test "Es posible moverlo hacia la izquierda" {
		unaPieza.moverIzquierda()
		assert.equals(config.centroGeneracion().left(1), unaPieza.centro().position())
	}
}

//////////////////////////////////////////////////////////
// TABLERO.
//////////////////////////////////////////////////////////
describe "Tablero" {
	const unaPieza = new Pieza_Z()
	
	test "La posicion (0, 1) no es valida" {
		assert.notThat(tablero.esValida(game.at(0, 1)))
	}
	
	test "La posicion (1, 0) no es valida" {
		assert.notThat(tablero.esValida(game.at(1, 0)))
	}
	
	test "La posicion (11, 1) no es valida" {
		assert.notThat(tablero.esValida(game.at(11, 1)))
	}
	
	test "La posicion (1, 1) es valida" {
		assert.that(tablero.esValida(game.at(1, 1)))
	}
	
	test "Es posible agregar una pieza a minos ocupados" {
		tablero.agregarMinosDe(unaPieza)
		assert.equals(unaPieza.minos(), tablero.minosAcumulados())
	}
	
	test "Es posible saber si hay mino ocupado en una posicion dada" {
		tablero.agregarMinosDe(unaPieza)
		assert.that(tablero.hayMinoEn(config.centroGeneracion()))
	}
	
	test "Es posible generar una pieza si la posicion no esta ocupada" {
		assert.that(unaPieza.puedeGenerar())
	}
	
	test "No es posible generar una pieza si la posicion esta ocupada" {
		tablero.agregarMinosDe(new Pieza_T())
		assert.notThat(unaPieza.puedeGenerar())
	}
	
	test "Es posible obtener una lista de las filas completas" {
		const posiciones = (1..tablero.ancho()).map({columna => game.at(columna, 1)}) + (2..tablero.ancho()).map({columna => game.at(columna, 3)})
		assert.equals([1], tablero.filasCompletas(posiciones))
	}
	
	test "Si se eliminan las filas 1 y 2, el mino en la posicion (3, 4) debera bajar 2 posiciones" {
		assert.equals(2, tablero.cantidadBajar(new Mino_Z(position = game.at(3,4)), [1, 2]))
	}
}
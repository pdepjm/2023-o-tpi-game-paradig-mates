import wollok.game.*
import Configuracion.*
import Entorno.*
import Informacion.*
import Piezas.*
import Tablero.*

//////////////////////////////////////////////////////////
// CONFIGURACION.
//////////////////////////////////////////////////////////
describe "Configuracion" {
	test "testX" {
		assert.that(true)
	}
}

//////////////////////////////////////////////////////////
// ENTORNO.
//////////////////////////////////////////////////////////
describe "Menu" {
	test "Es posbible mostrarlo" {
		menu.cargar()
		assert.that(menu.estaActivo())
	}
	
	test "Es posible ocultarlo/deshabilitarlo" {
		menu.cargar()
		menu.eliminar()
		assert.notThat(menu.estaActivo())
	}
	
	test "Es posible establecer el mensaje 'Presionar enter para continuar'" {
		menu.mostrarMensaje()
		assert.equals("MensajeMenu.png", mensaje.image())
		assert.equals(game.at(2, 5), mensaje.position())
	}
}

describe "Hub" {
	test "Es posible mostrar su informacion" {
		hub.cargar()
		assert.that(game.hasVisual(puntaje))
		assert.that(game.hasVisual(filas))
	}
	
	test "Es posible resetear su informacion" {
		puntaje.incrementar(10)
		filas.incrementar(10)
		hub.resetear()
		assert.equals("0", puntaje.text())
		assert.equals("0", filas.text())
	}
	
	test "Es posible establecer el mensaje 'Fin de juego'" {
		hub.mostrarMensaje()
		assert.equals("FinDeJuego.png", mensaje.image())
		assert.equals(game.at(2, 10), mensaje.position())
	}
	
	test "Si se completa 1 fila, se obtiene 100 puntos" {
		assert.equals(100, hub.puntosGanados([1]))
	}
	
	test "Si se completa 2 fila, se obtiene 200 puntos" {
		assert.equals(200, hub.puntosGanados([1, 2]))
	}
	
	test "Si se completa 3 fila, se obtiene 400 puntos" {
		assert.equals(400, hub.puntosGanados([1, 2, 3]))
	}
	
	test "Si se completa 4 fila, se obtiene 800 puntos" {
		assert.equals(800, hub.puntosGanados([1, 2, 3, 4]))
	}
}

//////////////////////////////////////////////////////////
// INFORMACION.
//////////////////////////////////////////////////////////
describe "Puntaje" {
	test "Es posible aumentarlo dado un valor" {
		puntaje.incrementar(100)
		puntaje.incrementar(200)
		assert.equals("300", puntaje.text())
	}
	
	test "Es posible resetearlo a 0" {
		puntaje.incrementar(100)
		puntaje.resetear()
		assert.equals("0", puntaje.text())
	}
	
	test "Al llegar al puntaje maximo puntaje se resetea" {
		puntaje.incrementar(999999900)
		puntaje.incrementar(100)
		assert.equals("100", puntaje.text())
	}
}

describe "Filas completadas" {
	test "Es posible aumentarlo en 1" {
		filas.incrementar(1)
		assert.equals("1", filas.text())
	}
	
	test "Es posible aumentarlo en 2" {
		filas.incrementar(2)
		assert.equals("2", filas.text())
	}
	
	test "Es posible aumentarlo en 3" {
		filas.incrementar(3)
		assert.equals("3", filas.text())
	}
	
	test "Es posible aumentarlo en 4" {
		filas.incrementar(4)
		assert.equals("4", filas.text())
	}
	
	test "Es posible resetearlo a 0" {
		filas.incrementar(2)
		filas.resetear()
		assert.equals("0", filas.text())
	}
}

describe "Proxima" {
	const unaPieza = new Pieza_Z()
	
	test "Es posible cargarlo" {
		proxima.image(unaPieza.mini())
		proxima.cargar()
		assert.that(proxima.estaActiva())
	}
	
	test "Es posible ocultarlo" {
		proxima.image(unaPieza.mini())
		proxima.cargar()
		proxima.ocultar()
		assert.notThat(proxima.estaActiva())
	}
}

describe "Mensaje" {
	test "Es posible mostrar el mensaje 'Presionar enter para continuar'" {
		mensaje.cargar()
		assert.that(mensaje.estaActiva())
	}
	
	test "Es posible ocultar el mensaje 'Presionar enter para continuar'" {
		mensaje.cargar()
		mensaje.ocultar()
		assert.notThat(mensaje.estaActiva())
	}
}

//////////////////////////////////////////////////////////
// PIEZAS.
//////////////////////////////////////////////////////////
describe "Piezas" {
	const unaPieza = new Pieza_Z()
	
	test "Es posible mostrarlo en el tablero" {
		unaPieza.generar()
		assert.that(unaPieza.estaActiva())
	}
	
	test "Es posible eliminarlo del tablero" {
		unaPieza.generar()
		unaPieza.eliminar()
		assert.notThat(unaPieza.estaActiva())
	}
	
	test "Es posible moverlo hacia abajo" {
		unaPieza.moverAbajo()
		assert.equals(config.centroGeneracion().down(1), unaPieza.centro().position())
	}
	
	test "Es posible moverlo hacia la derecha" {
		unaPieza.moverDerecha()
		assert.equals(config.centroGeneracion().right(1), unaPieza.centro().position())
	}
	
	test "Es posible moverlo hacia la izquierda" {
		unaPieza.moverIzquierda()
		assert.equals(config.centroGeneracion().left(1), unaPieza.centro().position())
	}
}

describe "Minos" { // TODO: No se si habra test para hacerle.
	test "testX" {
		assert.that(true)
	}
}

//////////////////////////////////////////////////////////
// TABLERO.
//////////////////////////////////////////////////////////
describe "Tablero" {
	const unaPieza = new Pieza_Z()
	
	test "La posicion (0, 1) no es valida" {
		assert.notThat(tablero.esValida(game.at(0, 1)))
	}
	
	test "La posicion (1, 0) no es valida" {
		assert.notThat(tablero.esValida(game.at(1, 0)))
	}
	
	test "La posicion (11, 1) no es valida" {
		assert.notThat(tablero.esValida(game.at(11, 1)))
	}
	
	test "La posicion (1, 1) es valida" {
		assert.that(tablero.esValida(game.at(1, 1)))
	}
	
	test "Es posible agregar una pieza a minos ocupados" {
		tablero.agregarMinosDe(unaPieza)
		assert.equals(unaPieza.minos(), tablero.minosAcumulados())
	}
	
	test "Es posible saber si hay mino ocupado en una posicion dada" {
		tablero.agregarMinosDe(unaPieza)
		assert.that(tablero.hayMinoEn(config.centroGeneracion()))
	}
	
	test "Es posible generar una pieza si la posicion no esta ocupada" {
		assert.that(tablero.puedeGenerar(unaPieza))
	}
	
	test "No es posible generar una pieza si la posicion esta ocupada" {
		tablero.agregarMinosDe(new Pieza_T())
		assert.notThat(tablero.puedeGenerar(unaPieza))
	}
	
	test "Es posible obtener una lista de las filas completas" {
		const posiciones = (1..tablero.ancho()).map({columna => game.at(columna, 1)}) + (2..tablero.ancho()).map({columna => game.at(columna, 3)})
		assert.equals([1], tablero.filasCompletas(posiciones))
	}
	
	test "Si se eliminan las filas 1 y 2, el mino en la posicion (3, 4) debera bajar 2 posiciones" {
		assert.equals(2, tablero.cantidadBajar(new Mino(position = game.at(3,4), image = "lightblue.png"), [1, 2]))
	}
}

describe "Muros" { // TODO: No se si habra test para hacerle.
	test "testX" {
		assert.that(true)
	}
}